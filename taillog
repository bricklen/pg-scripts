#!/bin/bash

## Author: Bricklen Anderson
## Filename: taillog
## Usage: Run as postgres user, put this script in $PATH and execute as any other executable.
## Requires superuser privilege to execute.

set -o errexit

PGPORT=5432     ## PGPORT is an environment var, but it is not always set, so default to 5432
DBNAME=postgres ## maintenance db
PGUSER=postgres
MIN_COMPATIBILITY_VER=100000 # Certain commands require certain versions of Postgres

usage()
{
cat <<-EOF
        Usage: ${0##*/} options

        This script tails and colorizes the current db log in \$PGDATA/pg_log/

        To tail the log in the default 5432 cluster:
            taillog

        To tail the current log in a specific cluster, eg. port 6543
            taillog -p 6543

        OPTIONS:
        -h  Show this message.
        -p  Specify a specific port
EOF
}

while getopts ":p:h" OPTION
do
    case $OPTION in
    h)
        usage
        exit 0
        ;;
    p)
        PGPORT=$OPTARG
        ;;
    ?)
        usage
        exit 1
        ;;
    esac
done


hash psql 2>/dev/null || { echo >&2 "psql command not available."; }
hash pg_isready 2>/dev/null || { echo >&2 "pg_isready command not available."; }
hash gawk 2>/dev/null || { echo >&2 "gawk command not available."; }

CMD_PSQL=$(which psql 2>/dev/null)
CMD_PGISREADY=$(which pg_isready 2>/dev/null)
CMD_GAWK=$(which gawk 2>/dev/null)


## Exit if PostgreSQL executable path cannot be determined
if [ -z "$CMD_PSQL" ]; then
    echo "Postgresql executables not found. Exiting."
    exit 1
fi

## Check if gawk exists
if [ -z "$CMD_GAWK" ]; then
    echo "\"gawk\" not found. Please install gawk to use this script. Exiting."
    exit 1
fi

## Exit if PostgreSQL port is not set
if [ -z "$PGPORT" ]; then
    echo "Postgresql port not set. Exiting."
    exit 1
fi

## Test if the cluster is up
if [ -e "$CMD_PGISREADY" ]; then
    retval=$(${CMD_PGISREADY} -h localhost -q -U "$PGUSER" -p $PGPORT -t 3; echo $?)
    if [ $retval -ne 0 ]; then
        echo "The PostgreSQL cluster at port $PGPORT does not appear to be responding. Aborting."
        exit 1
    fi
fi

# Get the current Postgres server version
PG_VERSION=$(${CMD_PSQL} -h localhost -d postgres -U "$PGUSER" -p $PGPORT -qtXAc "select current_setting('server_version_num') as ver")

if [ -z "$PG_VERSION" ]; then
    echo "No Postgresql version found. Aborting."
    exit 1
elif [ -n ${PG_VERSION} ] && [ ${PG_VERSION} -ge ${MIN_COMPATIBILITY_VER} ]; then
    # pg_current_logfile() is only available in Postgresql 10
    SQL="SELECT current_setting('data_directory') || '/' || pg_current_logfile()"
else
    SQL="SELECT current_setting('data_directory')||'/'||current_setting('log_directory')||'/'||file FROM (SELECT file,(pg_stat_file(current_setting('log_directory')||'/'||file)).modification FROM pg_ls_dir(current_setting('log_directory')||'/') as list(file) ORDER BY 2 DESC LIMIT 1) as y"
fi

if [ -z "$SQL" ]; then
    echo "No SQL query defined. Aborting."
    exit 1
fi

logfile=$(${CMD_PSQL} -h localhost -d "$DBNAME" -U "$PGUSER" -p $PGPORT -qtXAc "$SQL")

if [ ! -e "$logfile" ]; then
    echo "Postgresql log \"$logfile\" does not exist. Aborting."
    exit 1
fi

# color codes
# 0 - black
# 1 - red
# 2 - green
# 3 - yellow
# 4 - blue
# 5 - magenta
# 6 - cyan
# 7 - white
#
# sgr0 - exit attribute mode (turn colors off too)

## TODO:
## tail -F should attempt to follow the file descriptor after rotation,
## A challenge with Postgres is that a new file is created on rotation.
## A workaround migh be to put this in a wrapper that looks for
## a new log file every N seconds.

tail -F ${logfile} \
| ${CMD_GAWK} --re-interval \
    '
    {
        gsub( /duration: [0-9]{1,5}\.[0-9]*/,   "'`tput setaf 2`'&'`tput sgr0`'" ); 
        gsub( /duration: [0-9]{6,}\.[0-9]*/,    "'`tput setaf 4; tput bold; tput smso`'&'`tput rmso; tput sgr0`'" ); 
        gsub( /(ERROR|FATAL):/,                 "'`tput setaf 0; tput bold; tput setab 1`'&'`tput setab 0; tput sgr0`'");
        gsub( /(WARNING|cancel)/,               "'`tput setaf 3`'&'`tput sgr0`'");
        gsub( /\(db=[a-zA-Z0-9.]+\)/,           "'`tput setaf 5`'&'`tput sgr0`'");
        if ( $0 !~ /\(user=(postgres)\)/ )
        {
            gsub( /\(user=[a-zA-Z0-9.]+\)/,     "'`tput setaf 6`'&'`tput sgr0`'");
        }
        print; 
    }
    '

exit 0

